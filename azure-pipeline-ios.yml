trigger:
- main
- features/*
- fix/*
name: $(BuildID)

variables:
  keyVaultConnection: 'saiive Pay-As-You-Go (b207e678-0c82-4ed5-8cd7-3be5888d64e8)'
  keyVaultName: 'defichain-wallet'
- group: saiive.live

stages:
- stage: iOS
  displayName: iOS
  
  jobs:
  - job: ReleaseNotes
    displayName: "Generate release notes"
    pool:
      vmImage: 'ubuntu-latest'

    steps:
      - task: Bash@3
        displayName: "Prepare"
        inputs:
          targetType: 'inline'
          script: |
            mkdir -p  $(build.artifactStagingDirectory)/release-notes/
            touch $(build.artifactStagingDirectory)/release-notes/release-notes.txt

      - task: XplatGenerateReleaseNotes@3
        inputs:
          outputfile: '$(build.artifactStagingDirectory)/release-notes/release-notes.txt'
          templateLocation: 'File'
          templatefile: '.devops/release_notes_template.txt'
          dumpPayloadToConsole: true
          dumpPayloadToFile: false
          replaceFile: false
          getParentsAndChildren: False
          getAllParents: False
          getIndirectPullRequests: False
    
      - task: PublishBuildArtifacts@1
        displayName: "Publish artifacts"
        inputs:
          ArtifactName: 'release-notes'
        
  - job: BuildiOSAdHoc
    dependsOn: ReleaseNotes
    displayName: "Build iOS AdHoc"
    pool:
      vmImage: 'macOS-latest'
    
    steps:
      - task: AzureKeyVault@1
        inputs:
          azureSubscription: $(keyVaultConnection)
          KeyVaultName: $(keyVaultName)
          SecretsFilter: 'apple-adhoc-cert-password'
          RunAsPreJob: true

      - task: InstallAppleCertificate@2
        inputs:
          certSecureFile: 'DefiChainWalletAdHoc.p12'
          certPwd: '$(apple-adhoc-cert-password)'
          keychain: 'temp'

      - task: InstallAppleProvisioningProfile@1
        inputs:
          provisioningProfileLocation: 'secureFiles'
          provProfileSecureFile: 'at.saiive.live.adhoc.mobileprovision'

      - task: FlutterInstall@0
        displayName: "Flutter install"
        inputs:
          channel: 'stable'
          version: 'custom'
          customVersion: $(FlutterVersion) 

      - task: Bash@3
        displayName: "Flutter prepare"
        inputs:
          targetType: 'inline'
          script: |
            #cd $(Build.SourcesDirectory)
            #$(FlutterToolPath)/flutter doctor -v
            #$(FlutterToolPath)/flutter precache

      - task: Bash@3
        displayName: "Flutter build icons"
        inputs:
          targetType: 'inline'
          script: |
            cd $(Build.SourcesDirectory)
            $(FlutterToolPath)/flutter pub get
            $(FlutterToolPath)/flutter pub run flutter_launcher_icons:main -f flutter_launcher_icons-staging.yaml 
            cp -av $(Build.SourcesDirectory)/ios/Runner/Assets.xcassets/AppIcon-staging.appiconset/* $(Build.SourcesDirectory)/ios/Runner/Assets.xcassets/AppIcon.appiconset/

      - task: FlutterTest@0
        inputs:
          projectDirectory: '$(Build.SourcesDirectory)'
          generateCodeCoverageReport: true
          
      - task: FlutterBuild@0
        displayName: "Build iOS AdHoc"
        inputs:
          target: 'ios'
          projectDirectory: '$(Build.SourcesDirectory)'
          buildFlavour: 'staging'
          entryPoint: 'lib/main_staging.dart'
          verboseMode: true
          debugMode: false
          buildName: $(AppVersion)
          buildNumber: $(Build.BuildNumber)

      - task: Bash@3
        displayName: 'Create ipa package'
        inputs:
          targetType: 'inline'
          script: |
            xcodebuild -workspace ios/Runner.xcworkspace -scheme staging -sdk iphoneos -configuration Release-staging archive -archivePath build/ios/Runner.xcarchive
            xcodebuild -exportArchive -archivePath build/ios/Runner.xcarchive -exportOptionsPlist .devops/AdHocExportOptions.plist -exportPath build/ios

      - task: CopyFiles@2
        displayName: "Copy artifacts"
        inputs:
          contents: 'build/ios/*.ipa'
          targetFolder: '$(build.artifactStagingDirectory)/ios/staging'

      - task: PublishBuildArtifacts@1
        displayName: "Publish artifacts"
        inputs:
          ArtifactName: 'staging-ios'

  - job: BuildiOSAppStore
    dependsOn: ReleaseNotes
    displayName: "Build iOS AppStore"
    pool:
      vmImage: 'macOS-latest'

    steps:
      - task: AzureKeyVault@1
        inputs:
          azureSubscription: $(keyVaultConnection)
          KeyVaultName: $(keyVaultName)
          SecretsFilter: 'apple-adhoc-cert-password'
          RunAsPreJob: true

      - task: InstallAppleCertificate@2
        inputs:
          certSecureFile: 'DefiChainWalletAdHoc.p12'
          certPwd: '$(apple-adhoc-cert-password)'
          keychain: 'temp'

      - task: InstallAppleProvisioningProfile@1
        inputs:
          provisioningProfileLocation: 'secureFiles'
          provProfileSecureFile: 'at.saiive.live.appstore.mobileprovision'

      - task: FlutterInstall@0
        displayName: "Flutter install"
        inputs:
          channel: 'stable'
          version: 'custom'
          customVersion: $(FlutterVersion) 

      - task: Bash@3
        displayName: "Flutter prepare"
        inputs:
          targetType: 'inline'
          script: |
            #cd $(Build.SourcesDirectory)
            #$(FlutterToolPath)/flutter doctor -v
            #$(FlutterToolPath)/flutter precache

      - task: FlutterTest@0
        inputs:
          projectDirectory: '$(Build.SourcesDirectory)'
          generateCodeCoverageReport: true
            
      - task: Bash@3
        displayName: "Flutter build icons"
        inputs:
          targetType: 'inline'
          script: |
            cd $(Build.SourcesDirectory)
            $(FlutterToolPath)/flutter pub get
            $(FlutterToolPath)/flutter pub run flutter_launcher_icons:main -f flutter_launcher_icons-prod.yaml 
            cp -av $(Build.SourcesDirectory)/ios/Runner/Assets.xcassets/AppIcon-prod.appiconset/* $(Build.SourcesDirectory)/ios/Runner/Assets.xcassets/AppIcon.appiconset/

      - task: FlutterBuild@0
        displayName: "Build iOS AppStore"
        inputs:
          target: 'ios'
          projectDirectory: '$(Build.SourcesDirectory)'
          buildFlavour: 'production'
          entryPoint: 'lib/main_prod.dart'
          verboseMode: false
          debugMode: false
          buildName: $(AppVersion)
          buildNumber: $(Build.BuildNumber)

      - task: Bash@3
        displayName: 'Create ipa package'
        inputs:
          targetType: 'inline'
          script: |
            xcodebuild -workspace ios/Runner.xcworkspace -scheme production -sdk iphoneos -configuration Release-production archive -archivePath build/ios/Runner.xcarchive
            xcodebuild -exportArchive -archivePath build/ios/Runner.xcarchive -exportOptionsPlist .devops/AppStoreExportOptions.plist -exportPath build/ios

      - task: CopyFiles@2
        displayName: "Copy artifacts"
        inputs:
          contents: 'build/ios/*.ipa'
          targetFolder: '$(build.artifactStagingDirectory)/ios/production'

      - task: PublishBuildArtifacts@1
        displayName: "Publish artifacts"
        inputs:
          ArtifactName: 'production-ios'
