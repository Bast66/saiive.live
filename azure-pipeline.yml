trigger:
- main
name: $(BuildID)

stages:
- stage: Android
  displayName: Android
  
  jobs:
  - job: BuildAndroidDev
    displayName: "Build Android DEV"
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:

      - task: FlutterInstall@0
        displayName: "Flutter install"
        inputs:
          channel: 'beta'
          version: 'latest'
      - task: Bash@3
        displayName: "Flutter prepare"
        inputs:
          targetType: 'inline'
          script: |
            cd $(Build.SourcesDirectory)
            $(FlutterToolPath)/flutter doctor -v
            $(FlutterToolPath)/flutter precache
            export ENVFILE=.env-Debug
      
      - task: FlutterBuild@0
        displayName: Android Debug APK
        inputs:
          target: 'apk'
          projectDirectory: '$(Build.SourcesDirectory)'
          buildName: '0.1'
          debugMode: true
          apkTargetPlatform: 'android-arm64'
      - task: CopyFiles@2
        displayName: "Copy artifacts"
        inputs:
          contents: '**/*.apk'
          targetFolder: '$(build.artifactStagingDirectory)/android/debug'
      - task: Bash@3
        displayName: "Flutter clean"
        inputs:
          targetType: 'inline'
          script: |
            cd $(Build.SourcesDirectory)
            $(FlutterToolPath)/flutter clean
            
      - task: FlutterBuild@0
        displayName: Android Release APK
        inputs:
          target: 'apk'
          projectDirectory: '$(Build.SourcesDirectory)'
          buildName: '0.1'
          apkTargetPlatform: 'android-arm64'
      - task: CopyFiles@2
        displayName: "Copy artifacts"
        inputs:
          contents: '**/*.apk'
          targetFolder: '$(build.artifactStagingDirectory)/android/release'
      - task: PublishBuildArtifacts@1
        displayName: "Publish artifacts"
        inputs:
          ArtifactName: 'dev-android'

  - job: BuildAndroidStaging
    displayName: "Build Android STAGING"
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
      - task: FlutterInstall@0
        displayName: "Flutter install"
        inputs:
          channel: 'beta'
          version: 'latest'
      - task: Bash@3
        displayName: "Flutter prepare"
        inputs:
          targetType: 'inline'
          script: |
            export ENVFILE=.env-Staging
      - task: Bash@3
        displayName: "Flutter clean"
        inputs:
          targetType: 'inline'
          script: |
            cd $(Build.SourcesDirectory)
            $(FlutterToolPath)/flutter clean
            
      - task: FlutterBuild@0
        displayName: Android Release APK
        inputs:
          target: 'apk'
          projectDirectory: '$(Build.SourcesDirectory)'
          buildName: '0.1'
          apkTargetPlatform: 'android-arm64'
      - task: CopyFiles@2
        displayName: "Copy artifacts"
        inputs:
          contents: '**/*.apk'
          targetFolder: '$(build.artifactStagingDirectory)/android/release'
      - task: PublishBuildArtifacts@1
        displayName: "Publish artifacts"
        inputs:
          ArtifactName: 'staging-android'
  
  - job: BuildAndroidProd
    displayName: "Build Android PROD"
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:

      - task: FlutterInstall@0
        displayName: "Flutter install"
        inputs:
          channel: 'beta'
          version: 'latest'

      - task: Bash@3
        displayName: "Flutter prepare"
        inputs:
          targetType: 'inline'
          script: |
            export ENVFILE=.env-Prod
      - task: Bash@3
        displayName: "Flutter clean"
        inputs:
          targetType: 'inline'
          script: |
            cd $(Build.SourcesDirectory)
            $(FlutterToolPath)/flutter clean
            
      - task: FlutterBuild@0
        displayName: Android Release APK
        inputs:
          target: 'apk'
          projectDirectory: '$(Build.SourcesDirectory)'
          buildName: '0.1'
          apkTargetPlatform: 'android-arm64'
      - task: CopyFiles@2
        displayName: "Copy artifacts"
        inputs:
          contents: '**/*.apk'
          targetFolder: '$(build.artifactStagingDirectory)/android/release'
      - task: PublishBuildArtifacts@1
        displayName: "Publish artifacts"
        inputs:
          ArtifactName: 'prod-android'
      
# - stage: iOS
#   displayName: iOS
  
#   jobs:
#   - job: BuildiOS
#     displayName: "Build iOS"
#     pool:
#       vmImage: 'macOS-latest'
    
#     steps:

#       - task: AzureKeyVault@1
#         inputs:
#           azureSubscription: 'Microsoft Partner Network(551ab192-148c-445b-ae4f-0d0107e6f5de)'
#           KeyVaultName: 'defichain-wallet'
#           SecretsFilter: 'apple-dev-cert-password'
#           RunAsPreJob: true
#       - task: InstallAppleCertificate@2
#         inputs:
#           certSecureFile: 'apple.p12'
#           certPwd: '$(apple-dev-cert-password)'
#           keychain: 'temp'
          
#       - task: FlutterInstall@0
#         displayName: "Flutter install"
#         inputs:
#           channel: 'beta'
#           version: 'latest'
#       - task: Bash@3
#         displayName: "Flutter prepare"
#         inputs:
#           targetType: 'inline'
#           script: |
#             #cd $(Build.SourcesDirectory)
#             #$(FlutterToolPath)/flutter doctor -v
#             #$(FlutterToolPath)/flutter precache
#             echo $(apple-dev-cert) | base64 -d > dev-cert.p12

          

            
#       - task: FlutterBuild@0
#         displayName: "Build iOS debug"
#         inputs:
#           target: 'ios'
#           projectDirectory: '$(Build.SourcesDirectory)'
#           verboseMode: true
#           debugMode: true
#           buildName: '0.1'

#       - task: CopyFiles@2
#         displayName: "Copy artifacts"
#         inputs:
#           contents: '**/*.app'
#           targetFolder: '$(build.artifactStagingDirectory)/ios/debug'
#       - task: Bash@3
#         displayName: "Flutter clean"
#         inputs:
#           targetType: 'inline'
#           script: |
#             cd $(Build.SourcesDirectory)
#             $(FlutterToolPath)/flutter clean
#       - task: FlutterBuild@0
#         displayName: "Build iOS release"
#         inputs:
#           target: 'ios'
#           projectDirectory: '$(Build.SourcesDirectory)'
#           verboseMode: true
#           debugMode: false
#           buildName: '0.1'
#       - task: CopyFiles@2
#         displayName: "Copy artifacts"
#         inputs:
#           contents: '**/*.app'
#           targetFolder: '$(build.artifactStagingDirectory)/ios/release'
#       - task: PublishBuildArtifacts@1
#         displayName: "Publish artifacts"
#         inputs:
#           ArtifactName: 'ios'    
