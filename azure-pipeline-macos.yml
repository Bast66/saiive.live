trigger:
- main
name: $(BuildID)

stages:
- stage: macOS
  displayName: macOS
  
  jobs:
  - job: ReleaseNotes
    displayName: "Generate release notes"
    pool:
      vmImage: 'ubuntu-latest'

    steps:
      - task: Bash@3
        displayName: "Prepare"
        inputs:
          targetType: 'inline'
          script: |
            mkdir -p  $(build.artifactStagingDirectory)/release-notes/
            touch $(build.artifactStagingDirectory)/release-notes/release-notes.txt

      - task: XplatGenerateReleaseNotes@3
        inputs:
          outputfile: '$(build.artifactStagingDirectory)/release-notes/release-notes.txt'
          templateLocation: 'File'
          templatefile: '.devops/release_notes_template.txt'
          dumpPayloadToConsole: true
          dumpPayloadToFile: false
          replaceFile: false
          getParentsAndChildren: False
          getAllParents: False
          getIndirectPullRequests: False
    
      - task: PublishBuildArtifacts@1
        displayName: "Publish artifacts"
        inputs:
          ArtifactName: 'release-notes'
        
  - job: BuildMacOS
    dependsOn: ReleaseNotes
    displayName: "Build macOS .dmg"
    pool:
      vmImage: 'macOS-latest'
    
    steps:
      - task: AzureKeyVault@1
        inputs:
          azureSubscription: 'Microsoft Partner Network(551ab192-148c-445b-ae4f-0d0107e6f5de)'
          KeyVaultName: 'defichain-wallet'
          SecretsFilter: 'apple-adhoc-cert-password'
          RunAsPreJob: true

      - task: InstallAppleCertificate@2
        inputs:
          certSecureFile: 'DefiChainWalletAdHoc.p12'
          certPwd: '$(apple-adhoc-cert-password)'
          keychain: 'temp'

      - task: InstallAppleProvisioningProfile@1
        inputs:
          provisioningProfileLocation: 'secureFiles'
          provProfileSecureFile: 'com.defichain.wallet.adhoc-macos.mobileprovision'

      - task: FlutterInstall@0
        displayName: "Flutter install"
        inputs:
          channel: 'stable'
          version: 'custom'
          customVersion: '2.0.0'

      - task: Bash@3
        displayName: "Flutter prepare"
        inputs:
          targetType: 'inline'
          script: |
            #cd $(Build.SourcesDirectory)
            #$(FlutterToolPath)/flutter doctor -v
            #$(FlutterToolPath)/flutter precache

      - task: Bash@3
        displayName: "Flutter build icons"
        inputs:
          targetType: 'inline'
          script: |
            cd $(Build.SourcesDirectory)
            $(FlutterToolPath)/flutter pub get
            $(FlutterToolPath)/flutter pub run flutter_launcher_icons:main -f flutter_launcher_icons-staging.yaml 
            cp -av $(Build.SourcesDirectory)/ios/Runner/Assets.xcassets/AppIcon-staging.appiconset/* $(Build.SourcesDirectory)/ios/Runner/Assets.xcassets/AppIcon.appiconset/

      - task: FlutterTest@0
        inputs:
          projectDirectory: '$(Build.SourcesDirectory)'
          generateCodeCoverageReport: true
          
      - task: FlutterBuild@0
        displayName: "Build MacOS"
        inputs:
          target: 'macos'
          projectDirectory: '$(Build.SourcesDirectory)'
          buildFlavour: 'staging'
          entryPoint: 'lib/main_staging.dart'
          verboseMode: true
          debugMode: false
          buildName: '0.1'
          buildNumber: $(Build.BuildNumber)

      - task: Bash@3
        displayName: 'Sign .app'
        inputs:
          targetType: 'inline'
          script: |
            /usr/bin/codesign --force --deep -s 5QAM4Z73EV ./build/macos/Build/Products/Release/walletapp.app

      - task: Bash@3
        displayName: 'Create .dmg'
        inputs:
          targetType: 'inline'
          script: |
            brew install create-dmg

            create-dmg \
              --volname "defichainwallet" \
              --window-pos 200 120 \
              --window-size 800 529 \
              --icon-size 130 \
              --text-size 14 \
              --icon "build/macos/Build/Products/Release/walletapp.app" 260 250 \
              --hide-extension "walletapp.app" \
              --app-drop-link 540 250 \
              --hdiutil-quiet \
              "walletapp.dmg" \
              "build/macos/Build/Products/Release/walletapp.app"

      - task: CopyFiles@2
        displayName: "Copy artifacts"
        inputs:
          contents: 'walletapp.dmg'
          targetFolder: '$(build.artifactStagingDirectory)/macos/staging'

      - task: PublishBuildArtifacts@1
        displayName: "Publish artifacts"
        inputs:
          ArtifactName: 'staging-macos'
#
#  - job: BuildiOSAppStore
#    dependsOn: ReleaseNotes
#    displayName: "Build MacOS AppStore"
#    pool:
#      vmImage: 'macOS-latest'
#
#    steps:
#      - task: AzureKeyVault@1
#        inputs:
#          azureSubscription: 'Microsoft Partner Network(551ab192-148c-445b-ae4f-0d0107e6f5de)'
#          KeyVaultName: 'defichain-wallet'
#          SecretsFilter: 'apple-adhoc-cert-password'
#          RunAsPreJob: true
#
#      - task: InstallAppleCertificate@2
#        inputs:
#          certSecureFile: 'DefiChainWalletAdHoc.p12'
#          certPwd: '$(apple-adhoc-cert-password)'
#          keychain: 'temp'
#
#      - task: InstallAppleProvisioningProfile@1
#        inputs:
#          provisioningProfileLocation: 'secureFiles'
#          provProfileSecureFile: 'com.defichain.wallet.appstore-macos.mobileprovision'
#
#      - task: FlutterInstall@0
#        displayName: "Flutter install"
#        inputs:
#          channel: 'stable'
#          version: 'custom'
#          customVersion: '2.0.0'
#
#      - task: Bash@3
#        displayName: "Flutter prepare"
#        inputs:
#          targetType: 'inline'
#          script: |
#            #cd $(Build.SourcesDirectory)
#            #$(FlutterToolPath)/flutter doctor -v
#            #$(FlutterToolPath)/flutter precache
#
#      - task: FlutterTest@0
#        inputs:
#          projectDirectory: '$(Build.SourcesDirectory)'
#          generateCodeCoverageReport: true
#
#      - task: Bash@3
#        displayName: "Flutter build icons"
#        inputs:
#          targetType: 'inline'
#          script: |
#            cd $(Build.SourcesDirectory)
#            $(FlutterToolPath)/flutter pub get
#            $(FlutterToolPath)/flutter pub run flutter_launcher_icons:main -f flutter_launcher_icons-prod.yaml
#            cp -av $(Build.SourcesDirectory)/macos/Runner/Assets.xcassets/AppIcon-prod.appiconset/* $(Build.SourcesDirectory)/macos/Runner/Assets.xcassets/AppIcon.appiconset/
#
#      - task: FlutterBuild@0
#        displayName: "Build MacOS AppStore"
#        inputs:
#          target: 'macos'
#          projectDirectory: '$(Build.SourcesDirectory)'
#          buildFlavour: 'production'
#          entryPoint: 'lib/main_prod.dart'
#          verboseMode: false
#          debugMode: false
#          buildName: '0.1'
#          buildNumber: $(Build.BuildNumber)
#
#      - task: Bash@3
#        displayName: 'Create ipa package'
#        inputs:
#          targetType: 'inline'
#          script: |
#            xcodebuild -workspace macos/Runner.xcworkspace -scheme production -sdk macosx -configuration Release-production archive -archivePath build/macos/Runner.xcarchive
#            xcodebuild -exportArchive -archivePath build/macos/Runner.xcarchive -exportOptionsPlist .devops/AppStoreExportOptionsMacOS.plist -exportPath build/macos
#
#      - task: CopyFiles@2
#        displayName: "Copy artifacts"
#        inputs:
#          contents: 'build/ios/*.ipa'
#          targetFolder: '$(build.artifactStagingDirectory)/ios/production'
#
#      - task: PublishBuildArtifacts@1
#        displayName: "Publish artifacts"
#        inputs:
#          ArtifactName: 'production-ios'
